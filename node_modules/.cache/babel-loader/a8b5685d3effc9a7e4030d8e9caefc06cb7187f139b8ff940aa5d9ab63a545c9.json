{"ast":null,"code":"var _jsxFileName = \"/home/hugo/Documents/4A/cyber/front_url_parser/src/components/modalecaptcha.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { incrementscore, checkmilestone } from \"../services/servicesjeu\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useWindowSize } from 'react-use';\nimport Confetti from 'react-confetti';\nimport { calculateProofOfWork } from \"../utils/calculateProofOfWork\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ModalECaptcha({\n  onClose,\n  captchaData\n}) {\n  _s();\n  const [captchaImg, setCaptchaImg] = useState(null);\n  const [answer, setAnswer] = useState('');\n  const [challenge_id, Setchallenge_id] = useState('');\n  const [client_timestamp, setclient_timestamp] = useState('');\n  const [tries, setTries] = useState(0);\n  const [errorMsg, setErrorMsg] = useState(\"\");\n  const navigate = useNavigate();\n  const [showConfetti, setShowConfetti] = useState(false);\n  const {\n    width,\n    height\n  } = useWindowSize();\n  useEffect(() => {\n    const fetchCaptcha = () => {\n      try {\n        const {\n          challenge_id,\n          image_data,\n          timestamp\n        } = captchaData.challenge;\n        setCaptchaImg(`data:image/png;base64,${image_data}`);\n        Setchallenge_id(String(challenge_id));\n        setclient_timestamp(String(timestamp));\n        setAnswer('');\n        setErrorMsg('');\n        setTries(0);\n      } catch (error) {\n        console.error('Erreur lors de la récupération du captcha:', error);\n      }\n    };\n    fetchCaptcha();\n  }, [captchaData]);\n  const getnewcaptcha = async () => {\n    try {\n      const newCaptcha = await checkmilestone();\n      setCaptchaImg(`data:image/png;base64,${newCaptcha.challenge.image_data}`);\n      Setchallenge_id(String(newCaptcha.challenge.challenge_id));\n      setclient_timestamp(String(newCaptcha.challenge.timestamp));\n      setAnswer('');\n    } catch (error) {\n      console.error(\"Erreur lors de la récupération d'un nouveau captcha:\", error);\n    }\n  };\n  const handlecaptchavalue = async () => {\n    if (tries >= 2) {\n      setErrorMsg(\"Tentatives de captcha épuisées.\");\n      navigate('/');\n      return;\n    }\n    try {\n      const calculatedPoW = await calculateProofOfWork(challenge_id, 4);\n      const form = {\n        challenge_id,\n        answer,\n        client_timestamp,\n        proof_of_work: calculatedPoW\n      };\n      console.log(\"Formulaire envoyé:\", form);\n      const response = await incrementscore(form);\n      console.log(\"Réponse du serveur:\", response);\n      if (response.requires_verification === false) {\n        setShowConfetti(true);\n        setTimeout(() => {\n          setShowConfetti(false);\n          onClose();\n        }, 6000);\n      } else {\n        const newTries = tries + 1;\n        setTries(newTries);\n        if (newTries >= 3) {\n          setErrorMsg(\"Tentatives de captcha épuisées.\");\n        } else {\n          setErrorMsg(\"Captcha incorrect, veuillez réessayer.\");\n          await getnewcaptcha();\n        }\n      }\n    } catch (error) {\n      var _error$response, _error$response2;\n      const newTries = tries + 1;\n      setTries(newTries);\n      console.error(\"Erreur complète:\", error);\n      console.log(\"Détail backend:\", error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data);\n      alert(JSON.stringify(error === null || error === void 0 ? void 0 : (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data, null, 2));\n      if (newTries >= 3) {\n        setErrorMsg(\"Tentatives de captcha épuisées.\");\n      } else {\n        setErrorMsg(\"Erreur lors de la vérification du captcha, veuillez réessayer.\");\n        await getnewcaptcha();\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [showConfetti && /*#__PURE__*/_jsxDEV(Confetti, {\n      width: width,\n      height: height,\n      gravity: 0.5,\n      style: {\n        position: \"fixed\",\n        top: 0,\n        left: 0,\n        pointerEvents: \"none\",\n        zIndex: 2000\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'fixed',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        backgroundColor: '#fff',\n        padding: '20px',\n        boxShadow: '0 4px 8px rgba(0,0,0,0.2)',\n        zIndex: 1001\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"V\\xE9rification eCaptcha\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Veuillez r\\xE9soudre le captcha pour continuer.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: captchaImg || '/images/loading.png',\n        alt: \"Captcha\",\n        style: {\n          width: '100%',\n          height: 'auto',\n          marginBottom: '10px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Votre r\\xE9ponse\",\n        value: answer,\n        onChange: e => setAnswer(e.target.value),\n        style: {\n          width: '100%',\n          padding: '8px',\n          marginBottom: '10px'\n        },\n        disabled: tries >= 3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"relative\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            void handlecaptchavalue();\n          },\n          style: {\n            width: '100%',\n            padding: '8px'\n          },\n          disabled: tries >= 3,\n          children: \"Valider\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), errorMsg && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: 'red',\n          marginTop: 10,\n          textAlign: 'center'\n        },\n        children: errorMsg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(ModalECaptcha, \"eBolbhOWN4yvbRtRGIMD0EnbgOs=\", false, function () {\n  return [useNavigate, useWindowSize];\n});\n_c = ModalECaptcha;\nvar _c;\n$RefreshReg$(_c, \"ModalECaptcha\");","map":{"version":3,"names":["React","useState","useEffect","incrementscore","checkmilestone","useNavigate","useWindowSize","Confetti","calculateProofOfWork","jsxDEV","_jsxDEV","Fragment","_Fragment","ModalECaptcha","onClose","captchaData","_s","captchaImg","setCaptchaImg","answer","setAnswer","challenge_id","Setchallenge_id","client_timestamp","setclient_timestamp","tries","setTries","errorMsg","setErrorMsg","navigate","showConfetti","setShowConfetti","width","height","fetchCaptcha","image_data","timestamp","challenge","String","error","console","getnewcaptcha","newCaptcha","handlecaptchavalue","calculatedPoW","form","proof_of_work","log","response","requires_verification","setTimeout","newTries","_error$response","_error$response2","data","alert","JSON","stringify","children","gravity","style","position","top","left","pointerEvents","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","transform","backgroundColor","padding","boxShadow","src","alt","marginBottom","type","placeholder","value","onChange","e","target","disabled","onClick","color","marginTop","textAlign","_c","$RefreshReg$"],"sources":["/home/hugo/Documents/4A/cyber/front_url_parser/src/components/modalecaptcha.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { incrementscore, checkmilestone } from \"../services/servicesjeu\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useWindowSize } from 'react-use';\nimport Confetti from 'react-confetti';\nimport { calculateProofOfWork } from \"../utils/calculateProofOfWork\";\n\ntype Challenge = {\n  challenge_id: string;\n  image_data: string;\n  timestamp: string;\n};\n\ntype ModalECaptchaProps = {\n  onClose: () => void;\n  captchaData: { challenge: Challenge };\n};\n\nexport default function ModalECaptcha({ onClose, captchaData }: ModalECaptchaProps) {\n  const [captchaImg, setCaptchaImg] = useState<string | null>(null);\n  const [answer, setAnswer] = useState<string>('');\n  const [challenge_id, Setchallenge_id] = useState<string>('');\n  const [client_timestamp, setclient_timestamp] = useState<string>('');\n  const [tries, setTries] = useState(0);\n  const [errorMsg, setErrorMsg] = useState<string>(\"\");\n  const navigate = useNavigate();\n  const [showConfetti, setShowConfetti] = useState(false);\n  const { width, height } = useWindowSize();\n\n  useEffect(() => {\n    const fetchCaptcha = () => {\n      try {\n        const { challenge_id, image_data, timestamp } = captchaData.challenge;\n        setCaptchaImg(`data:image/png;base64,${image_data}`);\n        Setchallenge_id(String(challenge_id));\n        setclient_timestamp(String(timestamp));\n        setAnswer('');\n        setErrorMsg('');\n        setTries(0);\n      } catch (error) {\n        console.error('Erreur lors de la récupération du captcha:', error);\n      }\n    };\n    fetchCaptcha();\n  }, [captchaData]);\n\n  const getnewcaptcha = async () => {\n    try {\n      const newCaptcha = await checkmilestone();\n      setCaptchaImg(`data:image/png;base64,${newCaptcha.challenge.image_data}`);\n      Setchallenge_id(String(newCaptcha.challenge.challenge_id));\n      setclient_timestamp(String(newCaptcha.challenge.timestamp));\n      setAnswer('');\n    } catch (error) {\n      console.error(\"Erreur lors de la récupération d'un nouveau captcha:\", error);\n    }\n  };\n\n  const handlecaptchavalue = async () => {\n    if (tries >= 2) {\n      setErrorMsg(\"Tentatives de captcha épuisées.\");\n      navigate('/');\n      return;\n    }\n    try {\n      const calculatedPoW = await calculateProofOfWork(challenge_id, 4); \n      const form = {\n        challenge_id,\n        answer,\n        client_timestamp,\n        proof_of_work: calculatedPoW\n      };\n      console.log(\"Formulaire envoyé:\", form);\n      const response = await incrementscore(form);\n      console.log(\"Réponse du serveur:\", response);\n      if (response.requires_verification === false) {\n        setShowConfetti(true);\n        setTimeout(() => {\n          setShowConfetti(false);\n          onClose();\n        }, 6000);\n      } else {\n        const newTries = tries + 1;\n        setTries(newTries);\n        if (newTries >= 3) {\n          setErrorMsg(\"Tentatives de captcha épuisées.\");\n        } else {\n          setErrorMsg(\"Captcha incorrect, veuillez réessayer.\");\n          await getnewcaptcha();\n        }\n      }\n    } catch (error: any) {\n      const newTries = tries + 1;\n      setTries(newTries);\n      console.error(\"Erreur complète:\", error);\n      console.log(\"Détail backend:\", error?.response?.data);\n      alert(JSON.stringify(error?.response?.data, null, 2));\n      if (newTries >= 3) {\n        setErrorMsg(\"Tentatives de captcha épuisées.\");\n      } else {\n        setErrorMsg(\"Erreur lors de la vérification du captcha, veuillez réessayer.\");\n        await getnewcaptcha();\n      }\n    }\n  };\n\n  return (\n    <>\n      {showConfetti && (\n        <Confetti\n          width={width}\n          height={height}\n          gravity={0.5}\n          style={{\n            position: \"fixed\",\n            top: 0,\n            left: 0,\n            pointerEvents: \"none\",\n            zIndex: 2000,\n          }}\n        />\n      )}\n      <div\n        style={{\n          position: 'fixed',\n          top: '50%',\n          left: '50%',\n          transform: 'translate(-50%, -50%)',\n          backgroundColor: '#fff',\n          padding: '20px',\n          boxShadow: '0 4px 8px rgba(0,0,0,0.2)',\n          zIndex: 1001,\n        }}\n      >\n        <h2>Vérification eCaptcha</h2>\n        <p>Veuillez résoudre le captcha pour continuer.</p>\n        <img\n          src={captchaImg || '/images/loading.png'}\n          alt=\"Captcha\"\n          style={{ width: '100%', height: 'auto', marginBottom: '10px' }}\n        />\n        <input\n          type=\"text\"\n          placeholder=\"Votre réponse\"\n          value={answer}\n          onChange={e => setAnswer(e.target.value)}\n          style={{ width: '100%', padding: '8px', marginBottom: '10px' }}\n          disabled={tries >= 3}\n        />\n        <div style={{ position: \"relative\" }}>\n          <button\n            onClick={() => { void handlecaptchavalue(); }}\n            style={{ width: '100%', padding: '8px' }}\n            disabled={tries >= 3}\n          >\n            Valider\n          </button>\n        </div>\n        {errorMsg && (\n          <div style={{ color: 'red', marginTop: 10, textAlign: 'center' }}>\n            {errorMsg}\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}