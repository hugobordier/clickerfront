{"ast":null,"code":"const createCache=(maxCacheSize,expirationTime)=>{const cacheMap=new Map();const has=key=>{if(!cacheMap.has(key))return false;const cachedItem=cacheMap.get(key);const currentTime=Date.now();if(currentTime-cachedItem.timestamp>expirationTime){cacheMap.delete(key);// Suppression si expiré\nreturn false;}return true;};const get=key=>{return has(key)?cacheMap.get(key).value:undefined;};const set=(key,value)=>{if(cacheMap.size>=maxCacheSize){const firstEntry=cacheMap.keys().next();if(!firstEntry.done){cacheMap.delete(firstEntry.value);}}cacheMap.set(key,{value,timestamp:Date.now()});};const remove=key=>{cacheMap.delete(key);};const clear=()=>{cacheMap.clear();};return{has,get,set,remove,clear};};export default createCache;","map":{"version":3,"names":["createCache","maxCacheSize","expirationTime","cacheMap","Map","has","key","cachedItem","get","currentTime","Date","now","timestamp","delete","value","undefined","set","size","firstEntry","keys","next","done","remove","clear"],"sources":["/home/hugo/Documents/4A/cyber/front_url_parser/src/utils/cache.ts"],"sourcesContent":["import CachedItem from '../types/cache';\n\nconst createCache = <K, V>(maxCacheSize: number, expirationTime: number) => {\n  const cacheMap = new Map<K, CachedItem<V>>();\n\n  const has = (key: K): boolean => {\n    if (!cacheMap.has(key)) return false;\n\n    const cachedItem = cacheMap.get(key)!;\n    const currentTime = Date.now();\n\n    if (currentTime - cachedItem.timestamp > expirationTime) {\n      cacheMap.delete(key); // Suppression si expiré\n      return false;\n    }\n\n    return true;\n  };\n\n  const get = (key: K): V | undefined => {\n    return has(key) ? cacheMap.get(key)!.value : undefined;\n  };\n\n  const set = (key: K, value: V): void => {\n    if (cacheMap.size >= maxCacheSize) {\n      const firstEntry = cacheMap.keys().next();\n      if (!firstEntry.done) {\n        cacheMap.delete(firstEntry.value);\n      }\n    }\n\n    cacheMap.set(key, { value, timestamp: Date.now() });\n  };\n\n  const remove = (key: K): void => {\n    cacheMap.delete(key);\n  };\n\n  const clear = (): void => {\n    cacheMap.clear();\n  };\n\n  return {\n    has,\n    get,\n    set,\n    remove,\n    clear,\n  };\n};\n\nexport default createCache;\n"],"mappings":"AAEA,KAAM,CAAAA,WAAW,CAAGA,CAAOC,YAAoB,CAAEC,cAAsB,GAAK,CAC1E,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAC,GAAG,CAAmB,CAAC,CAE5C,KAAM,CAAAC,GAAG,CAAIC,GAAM,EAAc,CAC/B,GAAI,CAACH,QAAQ,CAACE,GAAG,CAACC,GAAG,CAAC,CAAE,MAAO,MAAK,CAEpC,KAAM,CAAAC,UAAU,CAAGJ,QAAQ,CAACK,GAAG,CAACF,GAAG,CAAE,CACrC,KAAM,CAAAG,WAAW,CAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAE9B,GAAIF,WAAW,CAAGF,UAAU,CAACK,SAAS,CAAGV,cAAc,CAAE,CACvDC,QAAQ,CAACU,MAAM,CAACP,GAAG,CAAC,CAAE;AACtB,MAAO,MAAK,CACd,CAEA,MAAO,KAAI,CACb,CAAC,CAED,KAAM,CAAAE,GAAG,CAAIF,GAAM,EAAoB,CACrC,MAAO,CAAAD,GAAG,CAACC,GAAG,CAAC,CAAGH,QAAQ,CAACK,GAAG,CAACF,GAAG,CAAC,CAAEQ,KAAK,CAAGC,SAAS,CACxD,CAAC,CAED,KAAM,CAAAC,GAAG,CAAGA,CAACV,GAAM,CAAEQ,KAAQ,GAAW,CACtC,GAAIX,QAAQ,CAACc,IAAI,EAAIhB,YAAY,CAAE,CACjC,KAAM,CAAAiB,UAAU,CAAGf,QAAQ,CAACgB,IAAI,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CACzC,GAAI,CAACF,UAAU,CAACG,IAAI,CAAE,CACpBlB,QAAQ,CAACU,MAAM,CAACK,UAAU,CAACJ,KAAK,CAAC,CACnC,CACF,CAEAX,QAAQ,CAACa,GAAG,CAACV,GAAG,CAAE,CAAEQ,KAAK,CAAEF,SAAS,CAAEF,IAAI,CAACC,GAAG,CAAC,CAAE,CAAC,CAAC,CACrD,CAAC,CAED,KAAM,CAAAW,MAAM,CAAIhB,GAAM,EAAW,CAC/BH,QAAQ,CAACU,MAAM,CAACP,GAAG,CAAC,CACtB,CAAC,CAED,KAAM,CAAAiB,KAAK,CAAGA,CAAA,GAAY,CACxBpB,QAAQ,CAACoB,KAAK,CAAC,CAAC,CAClB,CAAC,CAED,MAAO,CACLlB,GAAG,CACHG,GAAG,CACHQ,GAAG,CACHM,MAAM,CACNC,KACF,CAAC,CACH,CAAC,CAED,cAAe,CAAAvB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}