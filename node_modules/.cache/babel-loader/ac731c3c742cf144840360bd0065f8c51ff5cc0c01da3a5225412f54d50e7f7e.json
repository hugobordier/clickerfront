{"ast":null,"code":"const createCache = (maxCacheSize, expirationTime) => {\n  const cacheMap = new Map();\n  const has = key => {\n    if (!cacheMap.has(key)) return false;\n    const cachedItem = cacheMap.get(key);\n    const currentTime = Date.now();\n    if (currentTime - cachedItem.timestamp > expirationTime) {\n      cacheMap.delete(key); // Suppression si expiré\n      return false;\n    }\n    return true;\n  };\n  const get = key => {\n    return has(key) ? cacheMap.get(key).value : undefined;\n  };\n  const set = (key, value) => {\n    if (cacheMap.size >= maxCacheSize) {\n      const firstEntry = cacheMap.keys().next();\n      if (!firstEntry.done) {\n        cacheMap.delete(firstEntry.value);\n      }\n    }\n    cacheMap.set(key, {\n      value,\n      timestamp: Date.now()\n    });\n  };\n  const remove = key => {\n    cacheMap.delete(key);\n  };\n  const clear = () => {\n    cacheMap.clear();\n  };\n  return {\n    has,\n    get,\n    set,\n    remove,\n    clear\n  };\n};\nexport default createCache;","map":{"version":3,"names":["createCache","maxCacheSize","expirationTime","cacheMap","Map","has","key","cachedItem","get","currentTime","Date","now","timestamp","delete","value","undefined","set","size","firstEntry","keys","next","done","remove","clear"],"sources":["/home/hugo/Documents/4A/cyber/front_url_parser/src/utils/cache.ts"],"sourcesContent":["import CachedItem from '../types/cache';\n\nconst createCache = <K, V>(maxCacheSize: number, expirationTime: number) => {\n  const cacheMap = new Map<K, CachedItem<V>>();\n\n  const has = (key: K): boolean => {\n    if (!cacheMap.has(key)) return false;\n\n    const cachedItem = cacheMap.get(key)!;\n    const currentTime = Date.now();\n\n    if (currentTime - cachedItem.timestamp > expirationTime) {\n      cacheMap.delete(key); // Suppression si expiré\n      return false;\n    }\n\n    return true;\n  };\n\n  const get = (key: K): V | undefined => {\n    return has(key) ? cacheMap.get(key)!.value : undefined;\n  };\n\n  const set = (key: K, value: V): void => {\n    if (cacheMap.size >= maxCacheSize) {\n      const firstEntry = cacheMap.keys().next();\n      if (!firstEntry.done) {\n        cacheMap.delete(firstEntry.value);\n      }\n    }\n\n    cacheMap.set(key, { value, timestamp: Date.now() });\n  };\n\n  const remove = (key: K): void => {\n    cacheMap.delete(key);\n  };\n\n  const clear = (): void => {\n    cacheMap.clear();\n  };\n\n  return {\n    has,\n    get,\n    set,\n    remove,\n    clear,\n  };\n};\n\nexport default createCache;\n"],"mappings":"AAEA,MAAMA,WAAW,GAAGA,CAAOC,YAAoB,EAAEC,cAAsB,KAAK;EAC1E,MAAMC,QAAQ,GAAG,IAAIC,GAAG,CAAmB,CAAC;EAE5C,MAAMC,GAAG,GAAIC,GAAM,IAAc;IAC/B,IAAI,CAACH,QAAQ,CAACE,GAAG,CAACC,GAAG,CAAC,EAAE,OAAO,KAAK;IAEpC,MAAMC,UAAU,GAAGJ,QAAQ,CAACK,GAAG,CAACF,GAAG,CAAE;IACrC,MAAMG,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;IAE9B,IAAIF,WAAW,GAAGF,UAAU,CAACK,SAAS,GAAGV,cAAc,EAAE;MACvDC,QAAQ,CAACU,MAAM,CAACP,GAAG,CAAC,CAAC,CAAC;MACtB,OAAO,KAAK;IACd;IAEA,OAAO,IAAI;EACb,CAAC;EAED,MAAME,GAAG,GAAIF,GAAM,IAAoB;IACrC,OAAOD,GAAG,CAACC,GAAG,CAAC,GAAGH,QAAQ,CAACK,GAAG,CAACF,GAAG,CAAC,CAAEQ,KAAK,GAAGC,SAAS;EACxD,CAAC;EAED,MAAMC,GAAG,GAAGA,CAACV,GAAM,EAAEQ,KAAQ,KAAW;IACtC,IAAIX,QAAQ,CAACc,IAAI,IAAIhB,YAAY,EAAE;MACjC,MAAMiB,UAAU,GAAGf,QAAQ,CAACgB,IAAI,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;MACzC,IAAI,CAACF,UAAU,CAACG,IAAI,EAAE;QACpBlB,QAAQ,CAACU,MAAM,CAACK,UAAU,CAACJ,KAAK,CAAC;MACnC;IACF;IAEAX,QAAQ,CAACa,GAAG,CAACV,GAAG,EAAE;MAAEQ,KAAK;MAAEF,SAAS,EAAEF,IAAI,CAACC,GAAG,CAAC;IAAE,CAAC,CAAC;EACrD,CAAC;EAED,MAAMW,MAAM,GAAIhB,GAAM,IAAW;IAC/BH,QAAQ,CAACU,MAAM,CAACP,GAAG,CAAC;EACtB,CAAC;EAED,MAAMiB,KAAK,GAAGA,CAAA,KAAY;IACxBpB,QAAQ,CAACoB,KAAK,CAAC,CAAC;EAClB,CAAC;EAED,OAAO;IACLlB,GAAG;IACHG,GAAG;IACHQ,GAAG;IACHM,MAAM;IACNC;EACF,CAAC;AACH,CAAC;AAED,eAAevB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}